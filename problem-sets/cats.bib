@inproceedings{mz2015functors,
 author = {Melli\`{e}s, Paul-Andr{\'e} and Zeilberger, Noam},
 title = {Functors Are Type Refinement Systems},
 booktitle = {Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '15},
 year = {2015},
 isbn = {978-1-4503-3300-9},
 location = {Mumbai, India},
 pages = {3--16},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/2676726.2676970},
 doi = {10.1145/2676726.2676970},
 acmid = {2676970},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {category theory, refinement types, type theory},
}

@article{hoare69,
author = {Hoare, C. A. R.},
title = {An Axiomatic Basis for Computer Programming},
year = {1969},
issue_date = {Oct. 1969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {10},
issn = {0001-0782},
url = {https://doi.org/10.1145/363235.363259},
doi = {10.1145/363235.363259},
abstract = {In this paper an attempt is made to explore the logical foundations of computer programming by use of techniques which were first applied in the study of geometry and have later been extended to other branches of mathematics. This involves the elucidation of sets of axioms and rules of inference which can be used in proofs of the properties of computer programs. Examples are given of such axioms and rules, and a formal proof of a simple theorem is displayed. Finally, it is argued that important advantage, both theoretical and practical, may follow from a pursuance of these topics.},
journal = {Commun. ACM},
month = {oct},
pages = {576–580},
numpages = {5},
keywords = {axiomatic method, machine-independent programming, program documentation, theory of programming' proofs of programs, programming language design, formal language definition}
}

  

@article{ff02,
author = {Findler, Robert Bruce and Felleisen, Matthias},
title = {ICFP 2002: Contracts for Higher-Order Functions},
year = {2013},
issue_date = {April 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {4S},
issn = {0362-1340},
url = {https://doi.org/10.1145/2502508.2502521},
doi = {10.1145/2502508.2502521},
abstract = {Assertions play an important role in the construction of robust software. Their use in programming languages dates back to the 1970s. Eiffel, an object-oriented programming language, wholeheartedly adopted assertions and developed the "Design by Contract" philosophy. Indeed, the entire object-oriented community recognizes the value of assertion-based contracts on methods.In contrast, languages with higher-order functions do not support assertion-based contracts. Because predicates on functions are, in general, undecidable, specifying such predicates appears to be meaningless. Instead, the functional languages community developed type systems that statically approximate interesting predicates.In this paper, we show how to support higher-order function contracts in a theoretically well-founded and practically viable manner. Specifically, we introduce ?CON, a typed lambda calculus with assertions for higher-order functions. The calculus models the assertion monitoring system that we employ in Dr Scheme. We establish basic properties of the model (type soundness, etc.) and illustrate the usefulness of contract checking with examples from Dr Scheme's code base.We believe that the development of an assertion system for higherorder functions serves two purposes. On one hand, the system has strong practical potential because existing type systems simply cannot express many assertions that programmers would like to state. nOn the other hand, an inspection of a large base of invariants may provide inspiration for the direction of practical future type system research.},
journal = {SIGPLAN Not.},
month = {jul},
pages = {34–45},
numpages = {12},
keywords = {software reliability, predicate typing, behavioral specifications, higher-order functions, contracts}
}

@article{scott1980relating,
  title={Relating theories of the lambda calculus},
  author={Scott, Dana S},
  journal={To HB Curry: Essays on combinatory logic, lambda calculus and formalism},
  pages={403--450},
  url={http://maxsnew.com/docs/scott80.pdf},
  year={1980}
}
@inproceedings{wadler,
  author    = {Philip Wadler},
  editor    = {Joseph E. Stoy},
  title     = {Theorems for Free!},
  booktitle = {Proceedings of the fourth international conference on Functional programming
               languages and computer architecture, {FPCA} 1989, London, UK, September
               11-13, 1989},
  pages     = {347--359},
  publisher = {{ACM}},
  year      = {1989},
  url       = {https://doi.org/10.1145/99370.99404},
  doi       = {10.1145/99370.99404},
  timestamp = {Wed, 14 Nov 2018 10:57:36 +0100},
  biburl    = {https://dblp.org/rec/conf/fpca/Wadler89.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{reynolds,
  author    = {John C. Reynolds},
  editor    = {R. E. A. Mason},
  title     = {Types, Abstraction and Parametric Polymorphism},
  booktitle = {Information Processing 83, Proceedings of the {IFIP} 9th World Computer
               Congress, Paris, France, September 19-23, 1983},
  pages     = {513--523},
  publisher = {North-Holland/IFIP},
  year      = {1983},
  timestamp = {Sun, 28 Jul 2019 17:03:41 +0200},
  biburl    = {https://dblp.org/rec/conf/ifip/Reynolds83.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}